<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:s3="http://www.mulesoft.org/schema/mule/s3" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/s3 http://www.mulesoft.org/schema/mule/s3/current/mule-s3.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd">
    <flow name="example:/http-incoming-flow">
        <set-payload value="#['lol']" doc:name="Overwrite the payload"/>
        <http:listener config-ref="example-pizza-httpListenerConfig" path="/" doc:name="HTTP"/>
        <set-variable variableName="z-level" value="#[7000]" doc:name="Set Z level to 7000" b="2"/>
        <set-payload value="#['lol']" doc:name="Overwrite the payload"/>
        <flow-ref name="example:/expunge-convolvers" doc:name="example:/expunge-convolvers"/>
        <foreach doc:name="For Each">
            <flow-ref name="example:/strain-overflow-noodle-requests" doc:name="example:/strain-overflow-noodle-requests"/>
            <flow-ref name="example:/strain-overflow-noodle-requests" doc:name="example:/strain-overflow-noodle-requests"/>
            <flow-ref name="example:/strain-overflow-noodle-requests" doc:name="example:/strain-overflow-noodle-requests"/>
            <flow-ref name="example:/strain-overflow-noodle-requests" doc:name="example:/strain-overflow-noodle-requests"/>
            <flow-ref name="example:/strain-overflow-noodle-requests" doc:name="example:/strain-overflow-noodle-requests"/>
        </foreach>
        <set-payload doc:name="Server Noodles"/>
        <dw:transform-message doc:name="Deduplicate">
            <dw:input-payload mimeType="application/java"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---

payload distinctBy $.pies]]></dw:set-payload>
        </dw:transform-message>
        <set-payload doc:name="Server Noodles 2"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <set-payload doc:name="Nothing to see here"/>
            <set-payload value="#['lol']" doc:name="Overwrite the payload"/>
            <message-properties-transformer doc:name="Nor here"/>
        </catch-exception-strategy>
    </flow>
    <sub-flow name="example:/new-flow">
        <set-payload doc:name="Set donkey identifiers"></set-payload>
    </sub-flow>
    <sub-flow name="example:/strain-overflow-noodle-requests">
        <scatter-gather doc:name="Clean carburetors">
            <processor-chain doc:name="Processor Chain">
                <http:request config-ref="" path="" method="" doc:name="Clean Carburetor 1"/>
                <mulexml:xml-to-dom-transformer doc:name="XML to DOM"/>
            </processor-chain>
            <processor-chain>
                <http:request config-ref="" path="" method="" doc:name="Oops this has a really long name"/>
                <set-payload doc:name="Set Payload"/>
            </processor-chain>
            <http:request config-ref="" path="" method="" doc:name="Clean Carburetor 3"/>
        </scatter-gather>
        <http:request config-ref="" path="" method="" doc:name="Start Internal Noodle Engine"/>
    </sub-flow>
    <munit:test description="Bork Bork" name="some-test">
        <mock:when doc:name="xxxx" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('zzzyyy')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[YYY]"/>
        </mock:when>
        <mock:spy doc:name="Spy" messageProcessor="asfsf">
            <mock:assertions-before-call>
                <munit:assert-true condition="#[af]" doc:name="gaddga"/>
            </mock:assertions-before-call>
        </mock:spy>
        <flow-ref doc:name="sgdsd" name="csgdsdg"/>
        <set-variable doc:name="var" name="ddd"/>
        <mock:verify-call doc:name="sgdsdgsgd" messageProcessor=".*:.*" times="4">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#sdfsdfw"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:before-suite name="test-mercer.read.eventBefore_Suite" description="MUnit Test">
        <set-payload doc:name="Set Payload"/>
    </munit:before-suite>
</mule>
